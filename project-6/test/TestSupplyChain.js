// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'


    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
//initilization
it("Testing smart contract function addRole(address account) for assigning roles ", async () => {
    const supplyChain = await SupplyChain.deployed();

    let result = await supplyChain.addDistributor(distributorID);
    assert.equal(result.logs[0].event, "addDistributorEvent");
    
    result = await supplyChain.addRetailer(retailerID);
    assert.equal(result.logs[0].event, "RetailerAdded");

    result = await supplyChain.addConsumer(consumerID);
    assert.equal(result.logs[0].event, "ConsumerAdded");
    
    result = await supplyChain.addFarmer(originFarmerID);
    assert.equal(result.logs[0].event, "FarmerAdded"); 
});
    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        // var event = supplyChain.Harvested()
        // await events.event((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Harvested by calling function harvestItem()
        let result=await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
          
        
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(result.logs[0].event, "Harvested") //asserts that the event has been emitted
        
        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
    
        
        // Declare and Initialize a variable for event
        // Watch the emitted event Processed()
        // Mark an item as Processed by calling function processtItem()
        let result = await supplyChain.processItem(upc, {from: originFarmerID});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Processed") //asserts that the event has been emitted
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
      
        
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event Packed()
        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.packItem(upc, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Packed") //asserts that the event has been emitted
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        
        
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        // Watch the emitted event Packed()
        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.sellItem(upc, productPrice ,{from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid Item price');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "ForSale") //asserts that the event has been emitted
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        let balance = web3.utils.toWei("6", "ether");


        // Declare and Initialize a variable for event
        // let balance = web3.utils.toWei("2", "ether");

         const distBalance = await web3.eth.getBalance(distributorID);
         const farmerBalance = await web3.eth.getBalance(originFarmerID);
        
         let result = await supplyChain.buyItem(upc, {from: distributorID,value: balance, gasPrice:0});

        const distBalanceAfterBuy = await web3.eth.getBalance(distributorID);
        const farmerBalanceAfterBuy = await web3.eth.getBalance(originFarmerID);

        let value = Number(distBalance) - Number(distBalanceAfterBuy);
        assert.equal(value, Number(productPrice));
        value = Number(farmerBalanceAfterBuy) - Number(farmerBalance);
        assert.equal(value, Number(productPrice));

        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(result.logs[0].event, "Sold") //asserts that the event has been emitted
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.shipItem(upc,{from: distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
       
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Shipped") //asserts that the event has been emitted
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.receiveItem(upc,{from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
       
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "Received") //asserts that the event has been emitted
             
    })    


    // 7th Test
    it("Testing smart contract function updateRetailPrice() that allows a retailer to update retailPrice", async() => {
        const supplyChain = await SupplyChain.deployed()
        let retailPrice = web3.utils.toWei("2", "ether")
        let result = await supplyChain.updateRetailPrice(upc, retailPrice, { from: retailerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[4], retailPrice, 'Error: Missing or Invalid productPrice');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
        assert.equal(result.logs[0].event, "RetailPriceUpdated") //asserts that the event has been emitted
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let balance = web3.utils.toWei("6", "ether");
         
        const resultBufferTwoOld = await supplyChain.fetchItemBufferTwo.call(upc);
        let retailPrice = web3.utils.toWei("2", "ether")
        // Declare and Initialize a variable for event
        // let balance = web3.utils.toWei("2", "ether");

         const distBalance = await web3.eth.getBalance(consumerID);
         const farmerBalance = await web3.eth.getBalance(retailerID);
        
        let result = await supplyChain.purchaseItem(upc, {from: consumerID,value: balance, gasPrice:0});

        const distBalanceAfterBuy = await web3.eth.getBalance(consumerID);
        const farmerBalanceAfterBuy = await web3.eth.getBalance(retailerID);

        let value = Number(distBalance) - Number(distBalanceAfterBuy);
        assert.equal(value, Number(retailPrice));
        value = Number(farmerBalanceAfterBuy) - Number(farmerBalance);
        assert.equal(value, Number(retailPrice));

        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[4], retailPrice, 'Error: Missing or Invalid productPrice');
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(result.logs[0].event, "Purchased") //asserts that the event has been emitted
        
        
    })    

   

});

